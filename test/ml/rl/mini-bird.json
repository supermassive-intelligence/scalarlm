[
    {
        "db_id": "cs_semester",
        "question": "Which course is more difficult, Intro to BlockChain or Computer Network?",
        "evidence": "diff refers to difficulty; diff is higher means the course is more difficult;",
        "SQL": "SELECT name FROM course WHERE name = 'Intro to BlockChain' OR name = 'Computer Network' ORDER BY diff DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question": "Please list the names of the courses that are less important than Machine Learning Theory.",
        "evidence": "lower credit means less important;",
        "SQL": "SELECT name FROM course WHERE credit < ( SELECT credit FROM course WHERE name = 'Machine Learning Theory' )"
    },
    {
        "db_id": "cs_semester",
        "question": "How many professors are more popular than Zhou Zhihua?",
        "evidence": "higher popularity means the professor is more popular;",
        "SQL": "SELECT COUNT(prof_id) FROM prof WHERE popularity > ( SELECT popularity FROM prof WHERE first_name = 'Zhihua' AND last_name = 'Zhou' )"
    },
    {
        "db_id": "cs_semester",
        "question": "What is the phone number of Kerry Pryor?",
        "evidence": "",
        "SQL": "SELECT phone_number FROM student WHERE l_name = 'Pryor' AND f_name = 'Kerry'"
    },
    {
        "db_id": "cs_semester",
        "question": "Which professor advised Faina Mallinar to become a research assistant? Please give his or her full name.",
        "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; full name refers to f_name and l_name;",
        "SQL": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Faina' AND T3.l_name = 'Mallinar'"
    },
    {
        "db_id": "cs_semester",
        "question": "How many research assistants does Sauveur Skyme have?",
        "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA;",
        "SQL": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.first_name = 'Sauveur' AND T2.last_name = 'Skyme'"
    },
    {
        "db_id": "cs_semester",
        "question": "Please list the full names of all the students who are research assistants with the highest research capability.",
        "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; the highest research capability refers to capability = 5; full name refers to f_name and l_name;",
        "SQL": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN RA AS T2 ON T1.student_id = T2.student_id WHERE T2.capability = 5"
    },
    {
        "db_id": "cs_semester",
        "question": "How many research assistants of Ogdon Zywicki have an average salary?",
        "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; average salary refers to salary = 'med';",
        "SQL": "SELECT COUNT(T1.prof_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.first_name = 'Ogdon' AND T1.salary = 'med' AND T2.last_name = 'Zywicki'"
    },
    {
        "db_id": "cs_semester",
        "question": "Please list the full names of all the students who took the course Machine Learning Theory.",
        "evidence": "full name refers to f_name and l_name;",
        "SQL": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Machine Learning Theory'"
    },
    {
        "db_id": "cs_semester",
        "question": "Among the students who got a B in the course Machine Learning Theory, how many of them have a gpa of over 3?",
        "evidence": "B refers to grade; GPA is an abbreviated name of Grade Point Average where over 3 refers to gpa > 3;",
        "SQL": "SELECT COUNT(student_id) FROM registration WHERE grade = 'B' AND student_id IN ( SELECT student_id FROM student WHERE gpa > 3 AND course_id IN ( SELECT course_id FROM course WHERE name = 'Machine Learning Theory' ) )"
    },
    {
        "db_id": "cs_semester",
        "question": "Please list the names of the courses taken by Laughton Antonio.",
        "evidence": "",
        "SQL": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.f_name = 'Laughton' AND T1.l_name = 'Antonio'"
    },
    {
        "db_id": "cs_semester",
        "question": "Which student failed the course Intro to Database 2? Please give his or her full name.",
        "evidence": "If grade is NULL, it means that this student fails to pass the course; full name refers to f_name and l_name;",
        "SQL": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade IS NULL AND T3.name = 'Intro to Database 2'"
    },
    {
        "db_id": "cs_semester",
        "question": "Which student is more satisfied with the course Machine Learning Theory, Willie Rechert or Laughton Antonio?",
        "evidence": "sat refers to student's satisfaction degree with the course; more satisfied refers to MAX(sat);",
        "SQL": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE (T1.f_name = 'Laughton' OR T1.f_name = 'Willie') AND (T1.l_name = 'Antonio' OR T1.l_name = 'Rechert') AND T3.name = 'Machine Learning Theory' ORDER BY T2.sat DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question": "Among the professors who have more than 3 research assistants, how many of them are male?",
        "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; more than 3 research assistant refers to COUNT(student_id) > 3;",
        "SQL": "SELECT COUNT(*) FROM ( SELECT T2.prof_id FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.gender = 'Male' GROUP BY T1.prof_id HAVING COUNT(T1.student_id) > 3 )"
    },
    {
        "db_id": "cs_semester",
        "question": "Among the students who took the course Machine Learning Theory, how many of them are undergraduates?",
        "evidence": "UG is an abbreviated name of undergraduate student in which type = 'UG';",
        "SQL": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Machine Learning Theory' AND T1.type = 'UG'"
    },
    {
        "db_id": "cs_semester",
        "question": "Which professor advised Willie Rechert to work as a research assistant? Please give his or her full name.",
        "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; prof_id refers to professor\u2019s ID; full name refers to f_name and l_name;",
        "SQL": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Willie' AND T3.l_name = 'Rechert'"
    },
    {
        "db_id": "cs_semester",
        "question": "What is the average gpa of Ogdon Zywicki's research assistants?",
        "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; prof_id refers to professor\u2019s ID; GPA is an abbreviated name of Grade Point Average where average = AVG(gpa);",
        "SQL": "SELECT SUM(T3.gpa) / COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id WHERE T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki'"
    },
    {
        "db_id": "cs_semester",
        "question": "What is the average satisfying degree of the course Machine Learning Theory?",
        "evidence": "sat refers to student's satisfaction degree with the course;",
        "SQL": "SELECT CAST(SUM(T1.sat) AS REAL) / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Machine Learning Theory'"
    },
    {
        "db_id": "cs_semester",
        "question": "Give the number of research postgraduate students.",
        "evidence": "RPG is an abbreviated name of research postgraduate student in which type = 'RPG';",
        "SQL": "SELECT COUNT(student_id) FROM student WHERE type = 'RPG'"
    },
    {
        "db_id": "cs_semester",
        "question": "Which student has the highest gpa? Give the full name.",
        "evidence": "GPA is an abbreviated name of Grade Point Average where highest GPA = MAX(gpa); full name refers to f_name and l_name;",
        "SQL": "SELECT f_name, l_name FROM student WHERE gpa = ( SELECT MAX(gpa) FROM student )"
    },
    {
        "db_id": "cs_semester",
        "question": "For the 3-credit course with the easiest difficulty, how many students get an \"A\" in that course?",
        "evidence": "diff refers to difficulty; diff is higher means the course is more difficult in which easiest difficulty refers to diff = 1; 3-credit course refers to credit = '3'; get an \"A\" refers to grade = 'A' for the course;",
        "SQL": "SELECT COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.grade = 'A' AND T2.credit = '3' AND T2.diff = 1"
    },
    {
        "db_id": "cs_semester",
        "question": "How many students took the hardest course?",
        "evidence": "diff refers to difficulty; diff is higher means the course is more difficult in which hardest difficulty is expressed as diff = 5;",
        "SQL": "SELECT COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.diff = 5"
    },
    {
        "db_id": "cs_semester",
        "question": "Which professor is Oliy Spratling working with? Give the full name.",
        "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; full name refers to f_name and l_name;",
        "SQL": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Oliy' AND T3.l_name = 'Spratling'"
    },
    {
        "db_id": "cs_semester",
        "question": "For the professor who is working with Harrietta Lydford, how is his popularity?",
        "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; higher popularity means more popular; prof_id refers to professor\u2019s ID;",
        "SQL": "SELECT T1.popularity FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Harrietta' AND T3.l_name = 'Lydford'"
    },
    {
        "db_id": "cs_semester",
        "question": "How many research assistants does the female professor with the lowest teaching ability have?",
        "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; professor with the lowest teaching ability refers to prof_id where teachability = '1';",
        "SQL": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability = '1' AND T2.gender = 'Female'"
    },
    {
        "db_id": "cs_semester",
        "question": "For the professors who advise more than 2 students, which professor has a higher teaching ability? Give the full name.",
        "evidence": "professor advising more than 2 students refers to COUNT(student_id) > 2; higher teachability refers to MAX(teachingability); full name refers to f_name and l_name;",
        "SQL": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, T2.teachingability FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id GROUP BY T1.prof_id HAVING COUNT(student_id) > 2 ) T ORDER BY T.teachingability DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question": "Give the grade score for Rik Unsworth in \"Computer Network\".",
        "evidence": "Academic grades awarded for participation in a course are A, B, C, D and F where Grade 'A' means excellent, Grade 'B' means good, Grade 'C' means fair, Grade 'D' means poorly pass, if grade is null or empty, it means that this student fails to pass this course in which grade = NULL;",
        "SQL": "SELECT CASE grade WHEN 'A' THEN 4 WHEN 'B' THEN 3 WHEN 'C' THEN 2 ELSE 1 END AS result FROM registration WHERE student_id IN ( SELECT student_id FROM student WHERE f_name = 'Rik' AND l_name = 'Unsworth' AND course_id IN ( SELECT course_id FROM course WHERE name = 'Computer Network' ) )"
    },
    {
        "db_id": "cs_semester",
        "question": "How many courses does Alvera McQuillin take?",
        "evidence": "",
        "SQL": "SELECT COUNT(T1.course_id) FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.f_name = 'Alvera' AND T2.l_name = 'McQuillin'"
    },
    {
        "db_id": "cs_semester",
        "question": "State the name of research postgraduate student among Professor Zhihua Zhou's research assistants.",
        "evidence": "research postgraduate student refers to type = 'RPG'; research assistant refers to the student who serves for research where the abbreviation is RA;",
        "SQL": "SELECT T3.f_name, T3.l_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T1.first_name = 'Zhihua' AND T3.type = 'RPG' AND T1.last_name = 'Zhou'"
    },
    {
        "db_id": "cs_semester",
        "question": "Provide the number of students enrolled in the \"Statistical Learning\" course.",
        "evidence": "",
        "SQL": "SELECT COUNT(T2.student_id) FROM course AS T1 INNER JOIN registration AS T2 ON T1.course_id = T2.course_id WHERE T1.name = 'Statistical learning'"
    },
    {
        "db_id": "cs_semester",
        "question": "Who were the students who failed the course \"Applied Deep Learning\"? Give the full name.",
        "evidence": "If grade is null or empty, it means that this student fails to pass the course in which grade = NULL;",
        "SQL": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Applied Deep Learning ' AND T2.grade IS NULL"
    },
    {
        "db_id": "cs_semester",
        "question": "Give the phone number of the only student who obtained \"A\" in the course \"Intro to BlockChain\".",
        "evidence": "A refers to an excellent grade in which grade = 'A' for the course;",
        "SQL": "SELECT T1.phone_number FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Intro to BlockChain' AND T2.grade = 'A'"
    },
    {
        "db_id": "cs_semester",
        "question": "What is the percentage of Professor Ogdon Zywicki's research assistants are taught postgraduate students?",
        "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; taught postgraduate student refers to type = 'TPG'; DIVIDE(COUNT(student_id where type = 'TPG' and first_name = 'Ogdon', last_name = 'Zywicki'), COUNT(first_name = 'Ogdon', last_name = 'Zywicki')) as percentage;",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.type = 'TPG' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id WHERE T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki'"
    },
    {
        "db_id": "cs_semester",
        "question": "What is the percentage of students who get a \"B\" in the course \"Computer Network\"?",
        "evidence": "DIVIDE(COUNT(student_id(grade = 'B' and name = 'Computer Network')), COUNT(student_id where name = ' Computer Network')) as percentage;",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.grade = 'B' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Computer Network'"
    },
    {
        "db_id": "cs_semester",
        "question": "How many courses have the highest difficulty?",
        "evidence": "diff refers to difficulty; diff is higher means the course is more difficult in which highest difficulty is expessed as diff = 5;",
        "SQL": "SELECT COUNT(course_id) FROM course WHERE diff = 5"
    },
    {
        "db_id": "cs_semester",
        "question": "What is the full name of the professor who graduated from an Ivy League School?",
        "evidence": "Ivy League school is assembled by 8 universities: Brown University, Columbia University, Cornell University, Dartmouth College, Harvard University, Princeton University, University of Pennsylvania and Yale University;",
        "SQL": "SELECT first_name, last_name FROM prof WHERE graduate_from IN ( 'Brown University',  'Columbia University',  'Cornell University',  'Dartmouth College',  'Harvard University',  'Princeton University',  'University of Pennsylvania',  'Yale University' )"
    },
    {
        "db_id": "cs_semester",
        "question": "Among the most important courses, what is the name of the most difficult course?",
        "evidence": "Higher credit means more important in which most important refers to MAX(credit); diff refers to difficulty; the most difficult course refers to MAX(diff);",
        "SQL": "SELECT name FROM course WHERE credit = ( SELECT MAX(credit) FROM course ) AND diff = ( SELECT MAX(diff) FROM course )"
    },
    {
        "db_id": "cs_semester",
        "question": "How many students have the highest intelligence among those taking a bachelor's degree?",
        "evidence": "bachelor's degree is an undergraduate degree in which type = 'UG'; the highest intelligence refers to MAX(intelligence);",
        "SQL": "SELECT COUNT(student_id) FROM student WHERE type = 'UG' AND intelligence = ( SELECT MAX(intelligence) FROM student )"
    },
    {
        "db_id": "cs_semester",
        "question": "Among the most popular professors, how many are females?",
        "evidence": "the most popular professors refers to prof_id where MAX(popularity); female refers to gender;",
        "SQL": "SELECT COUNT(prof_id) FROM prof WHERE gender = 'Female' AND popularity = ( SELECT MAX(popularity) FROM prof )"
    },
    {
        "db_id": "cs_semester",
        "question": "How many research postgraduate students are there?",
        "evidence": "research postgraduate student refers to type = 'RPG';",
        "SQL": "SELECT COUNT(student_id) FROM student WHERE type = 'RPG'"
    },
    {
        "db_id": "cs_semester",
        "question": "How many students got an A in Applied Deep Learning?",
        "evidence": "A refers to an excellent grade in which grade = 'A' for the course;",
        "SQL": "SELECT COUNT(T2.student_id) FROM course AS T1 INNER JOIN registration AS T2 ON T1.course_id = T2.course_id WHERE T2.grade = 'A' AND T1.name = 'Applied Deep Learning '"
    },
    {
        "db_id": "cs_semester",
        "question": "What are the GPAs of the unpaid Research Assistants?",
        "evidence": "Unpaid Research Assistants undertake their work without payment in which salary = 'free';",
        "SQL": "SELECT T2.gpa FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'free'"
    },
    {
        "db_id": "cs_semester",
        "question": "Among the easiest courses, what is the name of the course where most students got an A?",
        "evidence": "diff refers to difficulty; the easiest courses refers to diff = 1; A refers to an excellent grade in which grade = 'A' for the course;",
        "SQL": "SELECT T2.name FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.grade = 'A' AND T2.diff = 1 GROUP BY T2.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question": "How many courses does the student with the highest GPA this semester take?",
        "evidence": "student with the highest GPA refers to student_id where MAX(gpa);",
        "SQL": "SELECT COUNT(course_id) FROM registration WHERE student_id IN ( SELECT student_id FROM student WHERE gpa = ( SELECT MAX(gpa) FROM student ) )"
    },
    {
        "db_id": "cs_semester",
        "question": "How many students does Ogdon Zywicki advise?",
        "evidence": "Ogdon Zywicki is a professor;",
        "SQL": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki'"
    },
    {
        "db_id": "cs_semester",
        "question": "What is the name of the course with the highest satisfaction from students?",
        "evidence": "sat refers to student's satisfaction degree with the course where sat = 5 stands for the highest satisfaction;",
        "SQL": "SELECT DISTINCT T2.name FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.sat = 5"
    },
    {
        "db_id": "cs_semester",
        "question": "What are the names of the courses that the students with the lowest intelligence are least satisfied with?",
        "evidence": "lower intelligence refers to intelligence = 1; sat refers to student's satisfaction degree with the course where least satisfaction refers to sat = 1;",
        "SQL": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.sat = 1 AND T1.intelligence = 1"
    },
    {
        "db_id": "cs_semester",
        "question": "Which of the two courses, \"Advanced Operating System\" or \"Intro to BlockChain', did most of the students receive an A in?",
        "evidence": "A refers to an excellent grade in which grade = 'A';",
        "SQL": "SELECT T2.name FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.grade = 'A' AND T2.name IN ('Advanced Operating System', 'Intro to BlockChain') GROUP BY T2.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question": "What is the popularity of the professor who advises the highest number of students with the highest research ability?",
        "evidence": "professor with the highest research ability refers to prof_id where MAX(capability);",
        "SQL": "SELECT T2.popularity FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id GROUP BY T1.prof_id, T1.capability ORDER BY COUNT(T1.student_id) DESC, T1.capability DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question": "What is the average number of students who registered for the courses with a difficulty of 4?",
        "evidence": "diff refers to difficulty; DIVIDE(COUNT(student_id where diff = 4), COUNT(course_id where diff = 4));",
        "SQL": "SELECT CAST(COUNT(T1.student_id) AS REAL) / COUNT(DISTINCT T2.course_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.diff = 4"
    },
    {
        "db_id": "cs_semester",
        "question": "How many students, who have a GPA between 3 to 4, failed a course?",
        "evidence": "GPA is an abbreviated name of Grade Point Average where GPA between 3 to 4 refers to gpa BETWEEN 3 AND 4; If grade is null or empty, it means that this student fails to pass this course;",
        "SQL": "SELECT COUNT(T2.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T2.grade IS NULL AND T1.gpa BETWEEN 3 AND 4"
    },
    {
        "db_id": "cs_semester",
        "question": "How many students taking a bachelor's degree received an A in all of the courses that they took?",
        "evidence": "bachelor's degree is an undergraduate degree in which type = 'UG'; A refers to an excellent grade in which grade = 'A';",
        "SQL": "SELECT COUNT(T2.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T2.grade = 'A' AND T1.type = 'UG'"
    },
    {
        "db_id": "cs_semester",
        "question": "What is the average GPA of the students with the highest research capability and high salary? List the full names of the students.",
        "evidence": "the highest research capability refers to capability = 5; high salary refers to salary = 'high'; prof_id refers to professor\u2019s ID; GPA is an abbreviated name of Grade Point Average where average GPA refers to AVG(gpa);",
        "SQL": "SELECT AVG(T2.gpa), T2.f_name, T2.l_name FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'high' AND T1.capability = 5 GROUP BY T2.student_id"
    },
    {
        "db_id": "cs_semester",
        "question": "List the professors' IDs and students' IDs with the lowest research ability.",
        "evidence": "the lowest research ability refers to MIN(capability); professor\u2019s ID refers to prof_id;",
        "SQL": "SELECT prof_id, student_id FROM RA WHERE capability = ( SELECT MIN(capability) FROM RA )"
    },
    {
        "db_id": "cs_semester",
        "question": "Name the professor who got graduation from the University of Boston.",
        "evidence": "Name the professor refers to full name which includes f_name and l_name;",
        "SQL": "SELECT first_name, last_name FROM prof WHERE graduate_from = 'University of Boston'"
    },
    {
        "db_id": "cs_semester",
        "question": "List the courses' IDs and students' IDs who failed to pass the course.",
        "evidence": "If grade is null or empty, it means that this student fails to pass the course;",
        "SQL": "SELECT course_id, student_id FROM registration WHERE grade IS NULL OR grade = ''"
    },
    {
        "db_id": "cs_semester",
        "question": "What is the male and female ratio among the professors?",
        "evidence": "DIVIDE(COUNT(prof_id where gender = 'Male'), COUNT(prof_id where gender = 'Female'));",
        "SQL": "SELECT CAST(SUM(CASE WHEN gender = 'Male' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender = 'Female' THEN 1 ELSE 0 END) FROM prof"
    },
    {
        "db_id": "cs_semester",
        "question": "Describe the names and credits of the least difficult courses.",
        "evidence": "diff refers to difficulty; the least difficult courses refer to MIN(diff);",
        "SQL": "SELECT name, credit FROM course WHERE diff = ( SELECT MIN(diff) FROM course )"
    },
    {
        "db_id": "cs_semester",
        "question": "Describe the students' full names and GPAs under the supervision of the most popular professor.",
        "evidence": "student's full names = f_name, l_name; most popular refers to MAX(popularity);",
        "SQL": "SELECT T3.f_name, T3.l_name, T3.gpa FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id ORDER BY T1.popularity DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question": "Provide the full names and emails of unpaid research assistants.",
        "evidence": "full names = f_name, l_name; research assistant refers to the student who serves for research where the abbreviation is RA; unpaid research assistant refers to salary = 'free';",
        "SQL": "SELECT T2.f_name, T2.l_name, T2.email FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'free'"
    },
    {
        "db_id": "cs_semester",
        "question": "List the research assistants' full names, capabilities and GPAs who were under the supervision of Merwyn Conkay.",
        "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; full names = f_name, l_name;",
        "SQL": "SELECT T3.f_name, T3.l_name, T2.capability, T3.gpa FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T1.first_name = 'Merwyn' AND T1.last_name = 'Conkay'"
    },
    {
        "db_id": "cs_semester",
        "question": "Describe the students' full names and grades in Intro to BlockChain course.",
        "evidence": "student's full names = f_name, l_name;",
        "SQL": "SELECT T1.f_name, T1.l_name, T2.grade FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Intro to BlockChain'"
    },
    {
        "db_id": "cs_semester",
        "question": "Among students registered for the most difficult course, list the students' full names who got grade A.",
        "evidence": "difficulty refers to diff; most difficult course refers to MAX(diff); student's full names = f_name, l_name;",
        "SQL": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade = 'A' ORDER BY T3.diff DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question": "Describe the full names and graduated universities of the professors who advised Olia Rabier.",
        "evidence": "full names of the professors = first_name, last_name; graduated universities of the professors refers to graduate_from;",
        "SQL": "SELECT T1.first_name, T1.last_name, T1.graduate_from FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Olia' AND T3.l_name = 'Rabier'"
    },
    {
        "db_id": "cs_semester",
        "question": "Name the students of the Advanced Database Systems course with the highest satisfaction.",
        "evidence": "full the students = f_name, l_name; course refers to name; satisfaction refers to sat; highest satisfaction refers to MAX(sat);",
        "SQL": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Advanced Database Systems' ORDER BY T2.sat DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question": "Calculate the GPA of the semester for Laughton Antonio.",
        "evidence": "GPA of the semester = DIVIDE(SUM(MULTIPLY(credit, grade)), SUM(credit)); grade 'A' refers to gpa = 4; grade 'B' refers to gpa = 3; grade 'C' refers to gpa = 2; grade 'D' refers to gpa = 1;",
        "SQL": "SELECT CAST(SUM(T3.credit * CASE T1.grade WHEN 'A' THEN 4 WHEN 'B' THEN 3 WHEN 'C' THEN 2 WHEN 'D' THEN 1 ELSE 1 END) AS REAL) / COUNT(T3.credit) FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T2.f_name = 'Laughton' AND T2.l_name = 'Antonio'"
    },
    {
        "db_id": "cs_semester",
        "question": "Provide the registered courses' names by undergraduate students with GPA of 3.7 and above.",
        "evidence": "Undergraduate students refers to type = 'UG'; GPA of 3.7 and above refers to gpa > 3.7;",
        "SQL": "SELECT DISTINCT T1.f_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.type = 'UG' AND T1.gpa > 3.7"
    },
    {
        "db_id": "cs_semester",
        "question": "Describe the names and capability of the students who were advised by professors from the University of Washington.",
        "evidence": "names of the students = f_name, l_name;",
        "SQL": "SELECT T3.f_name, T3.l_name, T2.capability FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T1.graduate_from = 'University of Washington'"
    },
    {
        "db_id": "cs_semester",
        "question": "Describe the full names, emails and intelligence of the students with the highest capability and salary.",
        "evidence": "full names of the students = f_name; l_name; highest capability refers to MAX(capability); highest salary refers to salary = 'high';",
        "SQL": "SELECT f_name, l_name, email, intelligence FROM student WHERE student_id IN ( SELECT student_id FROM RA WHERE salary = 'high' AND capability = ( SELECT MAX(capability) FROM RA ) )"
    },
    {
        "db_id": "cs_semester",
        "question": "Mention the names and credits of course registered by the students who were under the supervision of female professor with the highest teaching ability.",
        "evidence": "female refers to gender = 'Female'; highest teaching ability refers to MAX(teachingability);",
        "SQL": "SELECT T5.name, T5.credit FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id INNER JOIN registration AS T4 ON T3.student_id = T4.student_id INNER JOIN course AS T5 ON T4.course_id = T5.course_id WHERE T2.gender = 'Female' ORDER BY T2.teachingability DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question": "How many of the professors are female?",
        "evidence": "female refers to gender = 'Female';",
        "SQL": "SELECT COUNT(prof_id) FROM prof WHERE gender = 'Female'"
    },
    {
        "db_id": "cs_semester",
        "question": "What is the name of the most difficult course?",
        "evidence": "difficulty of a course refers to diff; most difficult course refers to MAX(diff);",
        "SQL": "SELECT name FROM course WHERE diff = ( SELECT MAX(diff) FROM course )"
    },
    {
        "db_id": "cs_semester",
        "question": "Among the students with a gpa of 3.1 to 3.7, how many of them are undergraduate students?",
        "evidence": "gpa of 3.1 to 3.7 refers to gpa BETWEEN 3.1 AND 3.7; undergraduate students refers to type = 'UG';",
        "SQL": "SELECT COUNT(student_id) FROM student WHERE gpa BETWEEN 3.1 AND 3.7 AND type = 'UG'"
    },
    {
        "db_id": "cs_semester",
        "question": "What is the credit of the course named \"Computer Vision\"?",
        "evidence": "",
        "SQL": "SELECT credit FROM course WHERE name = 'Computer Vision'"
    },
    {
        "db_id": "cs_semester",
        "question": "Give the student's ID of students with 2.5 GPA and enrolled in C for Programmers.",
        "evidence": "",
        "SQL": "SELECT T2.student_id FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'C for Programmers' AND T1.gpa = 2.5"
    },
    {
        "db_id": "cs_semester",
        "question": "Give the student's last name that gave the highest student satisfaction for the course \"Intro to Database 2\".",
        "evidence": "student's last name refers to l_name; satisfaction refers to sat; highest satisfaction refers to MAX(sat);",
        "SQL": "SELECT T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Intro to Database 2' ORDER BY T2.sat DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question": "Among the students with high salary, what is total number of students with a GPA higher than 3?",
        "evidence": "high salary refers to salary = 'high'; GPA higher than 3 refers to gpa > 3;",
        "SQL": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'high' AND T2.gpa > 3"
    },
    {
        "db_id": "cs_semester",
        "question": "Among undergraduate students, list the name of the course with the highest student satisfaction.",
        "evidence": "Undergraduate students refers to type = 'UG'; satisfaction refers to sat; highest satisfaction refers to MAX(sat);",
        "SQL": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.type = 'UG' ORDER BY T2.sat DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question": "List the capability of research postgraduate students with an intellegence level of 4 and above.",
        "evidence": "research postgraduate students refers to type = 'RPG'; intelligence level of 4 and above refers to intelligence > = 4;",
        "SQL": "SELECT T1.capability FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.type = 'RPG' AND T2.intelligence >= 4"
    },
    {
        "db_id": "cs_semester",
        "question": "In students with a grade of B, how many of them have an intellegence level of 3?",
        "evidence": "",
        "SQL": "SELECT COUNT(T1.student_id) FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.grade = 'B' AND T2.intelligence = 3"
    },
    {
        "db_id": "cs_semester",
        "question": "What is the difficulty of the course in which a student with level of intellengence of 5 got an A grade?",
        "evidence": "difficulty of the course refers to diff;",
        "SQL": "SELECT T3.diff FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade = 'A' AND T1.intelligence = 5"
    },
    {
        "db_id": "cs_semester",
        "question": "Among professors with the highest popularity, how many of their students have research capability of 5?",
        "evidence": "highest popularity refers to MAX(popularity); research capability refers to capability; capability = 5;",
        "SQL": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T1.capability = 5 ORDER BY T2.popularity DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question": "List the course's name where students acquired a grade of D.",
        "evidence": "",
        "SQL": "SELECT T1.name FROM course AS T1 INNER JOIN registration AS T2 ON T1.course_id = T2.course_id WHERE T2.grade = 'D'"
    },
    {
        "db_id": "cs_semester",
        "question": "What is the capability on research of the student named Alvera McQuillin?",
        "evidence": "capability on research refers to capability;",
        "SQL": "SELECT T2.capability FROM student AS T1 INNER JOIN RA AS T2 ON T1.student_id = T2.student_id WHERE T1.f_name = 'Alvera' AND T1.l_name = 'McQuillin'"
    },
    {
        "db_id": "cs_semester",
        "question": "Of courses with 3 credit, how many students have GPA of 3.2?",
        "evidence": "",
        "SQL": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.credit = 3 AND T1.gpa = 3.2"
    },
    {
        "db_id": "cs_semester",
        "question": "Among students with low salary, how many of them have a gpa of 3.5?",
        "evidence": "low salary refers to salary = 'low';",
        "SQL": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.gpa = 3.5 AND T1.salary = 'low'"
    },
    {
        "db_id": "cs_semester",
        "question": "List the student's email with grade of B in a course with difficulty greater than the 80% of average difficulty of all courses.",
        "evidence": "difficulty refers to diff; course with difficulty greater than the 80% of average difficulty refers to diff > MULTIPLY(AVG(diff), 80%);",
        "SQL": "SELECT T2.email FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T1.grade = 'B' GROUP BY T3.diff HAVING T3.diff > AVG(T3.diff) * 0.8"
    },
    {
        "db_id": "cs_semester",
        "question": "Among the professors with a teachability of 3 and below, what is the percentage of their student advisees with a low salary?",
        "evidence": "teachability < = 3; percentage = MULTIPLY(DIVIDE(COUNT(salary = 'low'), COUNT(salary)), 1.0);",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.salary = 'low' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.salary) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability < 3"
    },
    {
        "db_id": "cs_semester",
        "question": "Find the most important and most difficult courses.",
        "evidence": "most important refers to MAX(credit); most difficult refers to MAX(diff);",
        "SQL": "SELECT name FROM course WHERE credit = ( SELECT MAX(credit) FROM course ) AND diff = ( SELECT MAX(diff) FROM course )"
    },
    {
        "db_id": "cs_semester",
        "question": "What is the average teaching ability of the most popular professors?",
        "evidence": "average = AVG(teachingability); most popular professor refers to MAX(popularity);",
        "SQL": "SELECT CAST(SUM(teachingability) AS REAL) / COUNT(prof_id) FROM prof WHERE popularity = ( SELECT MAX(popularity) FROM prof )"
    },
    {
        "db_id": "cs_semester",
        "question": "Calculate the average satisfaction of the good students with their courses.",
        "evidence": "average satisfaction = DIVIDE(SUM(sat), COUNT(course_id)); satisfaction refers to sat; good student refers to grade = 'B';",
        "SQL": "SELECT CAST(SUM(sat) AS REAL) / COUNT(course_id) FROM registration WHERE grade = 'B'"
    },
    {
        "db_id": "cs_semester",
        "question": "Among the students with less than four intelligence, list the full name and phone number of students with a greater than 3 GPA.",
        "evidence": "intelligence < 4; full name = f_name, l_name; gpa > 3;",
        "SQL": "SELECT f_name, l_name, phone_number FROM student WHERE gpa > 3 AND intelligence < 4"
    },
    {
        "db_id": "cs_semester",
        "question": "Name the students with above-average capability.",
        "evidence": "name of the students = f_name, l_name; above average-capability refers to capability > AVG(capability);",
        "SQL": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN RA AS T2 ON T1.student_id = T2.student_id WHERE T2.capability > ( SELECT AVG(capability) FROM RA )"
    },
    {
        "db_id": "cs_semester",
        "question": "For the students with an intelligence of 5, list the full name and courses taken by them who have less than a 3 GPA.",
        "evidence": "full name of the students = f_name, l_name; gpa < 3;",
        "SQL": "SELECT T1.f_name, T1.l_name, T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.intelligence = 5 AND T1.gpa < 3"
    },
    {
        "db_id": "cs_semester",
        "question": "What is the average capability of students with less than a 2.5 GPA?",
        "evidence": "average capability = AVG(capability); gpa < 2.5;",
        "SQL": "SELECT CAST(SUM(T1.capability) AS REAL) / COUNT(T1.student_id) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.gpa < 2.5"
    },
    {
        "db_id": "cs_semester",
        "question": "List the full name of the professors who advised students with intelligence 1.",
        "evidence": "full name of the professors = first_name, last_name;",
        "SQL": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.intelligence = 1"
    },
    {
        "db_id": "cs_semester",
        "question": "What is the difference in the average GPA of students who took the hardest and easiest courses?",
        "evidence": "difference in the average gpa = SUBTRACT(AVG(gpa WHERE MAX(diff)), AVG(gpa where min(diff))); difficulty of the course refers to diff; hardest course refers to MAX(diff); easiest course refers to MIN(diff);",
        "SQL": "SELECT AVG(T1.gpa) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.diff IN (2, 1) GROUP BY T3.diff"
    },
    {
        "db_id": "cs_semester",
        "question": "Give the full name and capability of students who failed in any courses.",
        "evidence": "full name of students = f_name, l_name; failed refers to grade IS NULL;",
        "SQL": "SELECT T2.f_name, T2.l_name, T1.capability FROM RA AS T1 INNER JOIN student AS T2 ON T2.student_id = T1.student_id INNER JOIN registration AS T3 ON T2.student_id = T3.student_id WHERE T3.grade IS NULL OR T3.grade = ''"
    },
    {
        "db_id": "cs_semester",
        "question": "Of the students with high salaries, how many took the computer vision course?",
        "evidence": "high salaries refers to salary = 'High';",
        "SQL": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN registration AS T2 ON T2.student_id = T1.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.salary = 'high' AND T3.name = 'Computer Vision'"
    },
    {
        "db_id": "cs_semester",
        "question": "Find the full name and popularity of the professor who advises the most number of students.",
        "evidence": "full name of the professor = first_name, last_name; most number of students refers to MAX(COUNT(student_id));",
        "SQL": "SELECT T1.first_name, T1.last_name, T1.popularity FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id GROUP BY T1.prof_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question": "Please give the name of the course in which most numbers of the students got an A. Also, list the full name of the students who got an A in this course.",
        "evidence": "most number of students got an A refers MAX(COUNT(student_id WHERE grade = 'A')); full name = f_name, l_name; got an A refers to grade = 'A';",
        "SQL": "SELECT T3.name, T2.f_name, T2.l_name FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T1.grade = 'A' GROUP BY T3.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question": "Calculate the difference between the average satisfaction of the students with high salaries and no salary.",
        "evidence": "average satisfaction difference = SUBTRACT(AVG(sat where salary = 'high')), (AVG(sat where salary = 'free')); satisfaction refers to sat; no salary refers to salary = 'free';",
        "SQL": "SELECT AVG(T2.sat) - ( SELECT AVG(T2.sat) FROM RA AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'free' ) AS diff FROM RA AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'high'"
    },
    {
        "db_id": "cs_semester",
        "question": "Find the university from which the professor who advised most undergraduate students graduated.",
        "evidence": "university from which the professor graduated refers to graduate_from; undergraduate students refers to type = 'UG';",
        "SQL": "SELECT T1.graduate_from FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.type = 'UG' GROUP BY T1.prof_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question": "Among the professors with more than average teaching ability, list the full name and email address of the professors who advise two or more students.",
        "evidence": "more than average teaching ability refers to teachingability > AVG(teachingability); full_name of the professor = first_name, last_name; email address of the professor refers to email; advises two or more students refers to COUNT(student_id) > = 2;\n",
        "SQL": "SELECT T2.first_name, T2.last_name, T2.email FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability > ( SELECT AVG(teachingability) FROM prof ) GROUP BY T2.prof_id HAVING COUNT(T1.student_id) >= 2"
    },
    {
        "db_id": "cs_semester",
        "question": "What percentage of students are highly satisfied with the Intro to Database 2 course?",
        "evidence": "percentage = MULTIPLY(DIVIDE(COUNT(MAX(sat)), (COUNT(student_id))), 1.0); highly satisfied refers to MAX(sat);",
        "SQL": "SELECT CAST(( SELECT COUNT(*) FROM course WHERE name = 'Intro to Database 2' AND course_id IN ( SELECT course_id FROM registration WHERE sat = ( SELECT MAX(sat) FROM registration ) ) ) AS REAL) * 100  / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Intro to Database 2'"
    },
    {
        "db_id": "cs_semester",
        "question": "What is the first and last name of students with highest gpa?",
        "evidence": "first name refers of students refers to f_name; last name of students refers to l_name; highest gpa refers to MAX(gpa);",
        "SQL": "SELECT f_name, l_name FROM student WHERE gpa = ( SELECT MAX(gpa) FROM student )"
    },
    {
        "db_id": "cs_semester",
        "question": "Among professors with the highest teachability, how many of their students have high salary?",
        "evidence": "highest teachability refers to MAX(teachability); high salary refers to salary = 'high';",
        "SQL": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T1.salary = 'high' ORDER BY T2.teachingability DESC LIMIT 1"
    },
    {
        "db_id": "cs_semester",
        "question": "What is the salary range of the student with an email of grosellg@hku.hk?",
        "evidence": "salary range refers to salary;",
        "SQL": "SELECT T1.salary FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.email = 'grosellg@hku.hk'"
    },
    {
        "db_id": "cs_semester",
        "question": "Among students that gave satisfaction of value 4 for the course named \"Statistical Learning\", how many of them have a gpa of 3.8?",
        "evidence": "satisfaction refers to sat;\n\nsat = 4; gpa = 3.8 ",
        "SQL": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Statistical learning' AND T2.sat = 4 AND T1.gpa = 3.8"
    },
    {
        "db_id": "cs_semester",
        "question": "Among courses with difficulty of 3, how many students have intellegence level of 2?",
        "evidence": "difficulty of 3 refers to diff = 3; intelligence = 2",
        "SQL": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.diff = 3 AND T1.intelligence = 2"
    },
    {
        "db_id": "cs_semester",
        "question": "List the student's first and last name that got a C in the course named \"Applied Deep Learning\".",
        "evidence": "student's first name refers to f_name; student's last name refers to l_name; got a C refers to grade = 'C';",
        "SQL": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Applied Deep Learning ' AND T2.grade = 'C'"
    },
    {
        "db_id": "cs_semester",
        "question": "Among research postgraduate students, give the name of the course with the student satisfaction value of 1.",
        "evidence": "research postgraduate students refers to type = 'RPG'; name of the course refers to name; satisfaction refers to sat; sat = 1;",
        "SQL": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.sat = 1 AND T1.type = 'RPG'"
    },
    {
        "db_id": "cs_semester",
        "question": "Among the students with a capability below 3, what is the difference of undergraduate students from research postgraduate students?",
        "evidence": "capability < 3; difference = subtract(count(type = 'UG')), (count(type = 'RPG')); undergraduate students refers to type = 'UG'; research postgraduate students refers to type = 'RPG';",
        "SQL": "SELECT SUM(CASE WHEN T2.type = 'UG' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.type = 'RPG' THEN 1 ELSE 0 END) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.capability < 3"
    }
]
